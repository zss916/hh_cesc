// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:cescpro/http/bean/alarm_graph_item_entity.dart';
import 'package:cescpro/http/bean/alarm_item_entity.dart';
import 'package:cescpro/http/bean/analysis_entity.dart';
import 'package:cescpro/http/bean/cell_data_entity.dart';
import 'package:cescpro/http/bean/com_card_vo_entity.dart';
import 'package:cescpro/http/bean/com_type_list_entity.dart';
import 'package:cescpro/http/bean/comp_tree_entity.dart';
import 'package:cescpro/http/bean/elec_graph_entity.dart';
import 'package:cescpro/http/bean/home_statistic_entity.dart';
import 'package:cescpro/http/bean/message_item_entity.dart';
import 'package:cescpro/http/bean/power_entity.dart';
import 'package:cescpro/http/bean/power_graph_entity.dart';
import 'package:cescpro/http/bean/pv_trend_entity.dart';
import 'package:cescpro/http/bean/site_detail_entity.dart';
import 'package:cescpro/http/bean/site_entity.dart';
import 'package:cescpro/http/bean/site_topology_entity.dart';
import 'package:cescpro/http/bean/soc_entity.dart';
import 'package:cescpro/http/bean/statistic_record_entity.dart';
import 'package:cescpro/http/bean/statistic_report_entity.dart';
import 'package:cescpro/http/bean/token_entity.dart';
import 'package:cescpro/http/bean/user_info_entity.dart';
import 'package:cescpro/http/bean/weather_entity.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler =
    void Function(Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(
    List<dynamic>? value, {
    EnumConvertFunction? enumConvert,
  }) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(
    dynamic value, {
    EnumConvertFunction? enumConvert,
  }) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(
    dynamic value, {
    EnumConvertFunction? enumConvert,
  }) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
          '$type unimplemented,you can try running the app again',
        );
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AlarmGraphItemEntity>[] is M) {
      return data
              .map<AlarmGraphItemEntity>(
                (Map<String, dynamic> e) => AlarmGraphItemEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AlarmItemEntity>[] is M) {
      return data
              .map<AlarmItemEntity>(
                (Map<String, dynamic> e) => AlarmItemEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisEntity>[] is M) {
      return data
              .map<AnalysisEntity>(
                (Map<String, dynamic> e) => AnalysisEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisTotalAlarmData>[] is M) {
      return data
              .map<AnalysisTotalAlarmData>(
                (Map<String, dynamic> e) => AnalysisTotalAlarmData.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisHighestAlarmData>[] is M) {
      return data
              .map<AnalysisHighestAlarmData>(
                (Map<String, dynamic> e) =>
                    AnalysisHighestAlarmData.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisHighestAlarmDataItems>[] is M) {
      return data
              .map<AnalysisHighestAlarmDataItems>(
                (Map<String, dynamic> e) =>
                    AnalysisHighestAlarmDataItems.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisAttentionAlarmData>[] is M) {
      return data
              .map<AnalysisAttentionAlarmData>(
                (Map<String, dynamic> e) =>
                    AnalysisAttentionAlarmData.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisAttentionAlarmDataItems>[] is M) {
      return data
              .map<AnalysisAttentionAlarmDataItems>(
                (Map<String, dynamic> e) =>
                    AnalysisAttentionAlarmDataItems.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<CellDataEntity>[] is M) {
      return data
              .map<CellDataEntity>(
                (Map<String, dynamic> e) => CellDataEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<CellDataCells>[] is M) {
      return data
              .map<CellDataCells>(
                (Map<String, dynamic> e) => CellDataCells.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ComCardVoEntity>[] is M) {
      return data
              .map<ComCardVoEntity>(
                (Map<String, dynamic> e) => ComCardVoEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ComCardVoItems>[] is M) {
      return data
              .map<ComCardVoItems>(
                (Map<String, dynamic> e) => ComCardVoItems.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ComCardVoDefaultList>[] is M) {
      return data
              .map<ComCardVoDefaultList>(
                (Map<String, dynamic> e) => ComCardVoDefaultList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ComTypeListEntity>[] is M) {
      return data
              .map<ComTypeListEntity>(
                (Map<String, dynamic> e) => ComTypeListEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ComTypeListItem>[] is M) {
      return data
              .map<ComTypeListItem>(
                (Map<String, dynamic> e) => ComTypeListItem.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<CompTreeEntity>[] is M) {
      return data
              .map<CompTreeEntity>(
                (Map<String, dynamic> e) => CompTreeEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<CompTreeChild>[] is M) {
      return data
              .map<CompTreeChild>(
                (Map<String, dynamic> e) => CompTreeChild.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ElecGraphEntity>[] is M) {
      return data
              .map<ElecGraphEntity>(
                (Map<String, dynamic> e) => ElecGraphEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<HomeStatisticEntity>[] is M) {
      return data
              .map<HomeStatisticEntity>(
                (Map<String, dynamic> e) => HomeStatisticEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<MessageItemEntity>[] is M) {
      return data
              .map<MessageItemEntity>(
                (Map<String, dynamic> e) => MessageItemEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PowerEntity>[] is M) {
      return data
              .map<PowerEntity>(
                (Map<String, dynamic> e) => PowerEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PowerGraphEntity>[] is M) {
      return data
              .map<PowerGraphEntity>(
                (Map<String, dynamic> e) => PowerGraphEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PowerGraphList>[] is M) {
      return data
              .map<PowerGraphList>(
                (Map<String, dynamic> e) => PowerGraphList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PvTrendEntity>[] is M) {
      return data
              .map<PvTrendEntity>(
                (Map<String, dynamic> e) => PvTrendEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteDetailEntity>[] is M) {
      return data
              .map<SiteDetailEntity>(
                (Map<String, dynamic> e) => SiteDetailEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteEntity>[] is M) {
      return data
              .map<SiteEntity>(
                (Map<String, dynamic> e) => SiteEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteDeviceDtoList>[] is M) {
      return data
              .map<SiteDeviceDtoList>(
                (Map<String, dynamic> e) => SiteDeviceDtoList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteGroupInfos>[] is M) {
      return data
              .map<SiteGroupInfos>(
                (Map<String, dynamic> e) => SiteGroupInfos.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteSiteGridDTOList>[] is M) {
      return data
              .map<SiteSiteGridDTOList>(
                (Map<String, dynamic> e) => SiteSiteGridDTOList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteTopologyEntity>[] is M) {
      return data
              .map<SiteTopologyEntity>(
                (Map<String, dynamic> e) => SiteTopologyEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteTopologyPv>[] is M) {
      return data
              .map<SiteTopologyPv>(
                (Map<String, dynamic> e) => SiteTopologyPv.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteTopologyStorage>[] is M) {
      return data
              .map<SiteTopologyStorage>(
                (Map<String, dynamic> e) => SiteTopologyStorage.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteTopologyLoad>[] is M) {
      return data
              .map<SiteTopologyLoad>(
                (Map<String, dynamic> e) => SiteTopologyLoad.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteTopologyPcs>[] is M) {
      return data
              .map<SiteTopologyPcs>(
                (Map<String, dynamic> e) => SiteTopologyPcs.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteTopologyGrid>[] is M) {
      return data
              .map<SiteTopologyGrid>(
                (Map<String, dynamic> e) => SiteTopologyGrid.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SiteTopologyLine>[] is M) {
      return data
              .map<SiteTopologyLine>(
                (Map<String, dynamic> e) => SiteTopologyLine.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<SocEntity>[] is M) {
      return data
              .map<SocEntity>((Map<String, dynamic> e) => SocEntity.fromJson(e))
              .toList()
          as M;
    }
    if (<StatisticRecordEntity>[] is M) {
      return data
              .map<StatisticRecordEntity>(
                (Map<String, dynamic> e) => StatisticRecordEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<StatisticRecordDailyStatisticVOList>[] is M) {
      return data
              .map<StatisticRecordDailyStatisticVOList>(
                (Map<String, dynamic> e) =>
                    StatisticRecordDailyStatisticVOList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<StatisticRecordDailyStatisticVOListDeviceList>[] is M) {
      return data
              .map<StatisticRecordDailyStatisticVOListDeviceList>(
                (Map<String, dynamic> e) =>
                    StatisticRecordDailyStatisticVOListDeviceList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<StatisticReportEntity>[] is M) {
      return data
              .map<StatisticReportEntity>(
                (Map<String, dynamic> e) => StatisticReportEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<StatisticReportDailyElecIncomeDetail>[] is M) {
      return data
              .map<StatisticReportDailyElecIncomeDetail>(
                (Map<String, dynamic> e) =>
                    StatisticReportDailyElecIncomeDetail.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<StatisticReportSubsidyDTO>[] is M) {
      return data
              .map<StatisticReportSubsidyDTO>(
                (Map<String, dynamic> e) =>
                    StatisticReportSubsidyDTO.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<TokenEntity>[] is M) {
      return data
              .map<TokenEntity>(
                (Map<String, dynamic> e) => TokenEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data
              .map<UserInfoEntity>(
                (Map<String, dynamic> e) => UserInfoEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<WeatherEntity>[] is M) {
      return data
              .map<WeatherEntity>(
                (Map<String, dynamic> e) => WeatherEntity.fromJson(e),
              )
              .toList()
          as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
        json.map((dynamic e) => e as Map<String, dynamic>).toList(),
      );
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AlarmGraphItemEntity).toString(): AlarmGraphItemEntity.fromJson,
    (AlarmItemEntity).toString(): AlarmItemEntity.fromJson,
    (AnalysisEntity).toString(): AnalysisEntity.fromJson,
    (AnalysisTotalAlarmData).toString(): AnalysisTotalAlarmData.fromJson,
    (AnalysisHighestAlarmData).toString(): AnalysisHighestAlarmData.fromJson,
    (AnalysisHighestAlarmDataItems).toString():
        AnalysisHighestAlarmDataItems.fromJson,
    (AnalysisAttentionAlarmData).toString():
        AnalysisAttentionAlarmData.fromJson,
    (AnalysisAttentionAlarmDataItems).toString():
        AnalysisAttentionAlarmDataItems.fromJson,
    (CellDataEntity).toString(): CellDataEntity.fromJson,
    (CellDataCells).toString(): CellDataCells.fromJson,
    (ComCardVoEntity).toString(): ComCardVoEntity.fromJson,
    (ComCardVoItems).toString(): ComCardVoItems.fromJson,
    (ComCardVoDefaultList).toString(): ComCardVoDefaultList.fromJson,
    (ComTypeListEntity).toString(): ComTypeListEntity.fromJson,
    (ComTypeListItem).toString(): ComTypeListItem.fromJson,
    (CompTreeEntity).toString(): CompTreeEntity.fromJson,
    (CompTreeChild).toString(): CompTreeChild.fromJson,
    (ElecGraphEntity).toString(): ElecGraphEntity.fromJson,
    (HomeStatisticEntity).toString(): HomeStatisticEntity.fromJson,
    (MessageItemEntity).toString(): MessageItemEntity.fromJson,
    (PowerEntity).toString(): PowerEntity.fromJson,
    (PowerGraphEntity).toString(): PowerGraphEntity.fromJson,
    (PowerGraphList).toString(): PowerGraphList.fromJson,
    (PvTrendEntity).toString(): PvTrendEntity.fromJson,
    (SiteDetailEntity).toString(): SiteDetailEntity.fromJson,
    (SiteEntity).toString(): SiteEntity.fromJson,
    (SiteDeviceDtoList).toString(): SiteDeviceDtoList.fromJson,
    (SiteGroupInfos).toString(): SiteGroupInfos.fromJson,
    (SiteSiteGridDTOList).toString(): SiteSiteGridDTOList.fromJson,
    (SiteTopologyEntity).toString(): SiteTopologyEntity.fromJson,
    (SiteTopologyPv).toString(): SiteTopologyPv.fromJson,
    (SiteTopologyStorage).toString(): SiteTopologyStorage.fromJson,
    (SiteTopologyLoad).toString(): SiteTopologyLoad.fromJson,
    (SiteTopologyPcs).toString(): SiteTopologyPcs.fromJson,
    (SiteTopologyGrid).toString(): SiteTopologyGrid.fromJson,
    (SiteTopologyLine).toString(): SiteTopologyLine.fromJson,
    (SocEntity).toString(): SocEntity.fromJson,
    (StatisticRecordEntity).toString(): StatisticRecordEntity.fromJson,
    (StatisticRecordDailyStatisticVOList).toString():
        StatisticRecordDailyStatisticVOList.fromJson,
    (StatisticRecordDailyStatisticVOListDeviceList).toString():
        StatisticRecordDailyStatisticVOListDeviceList.fromJson,
    (StatisticReportEntity).toString(): StatisticReportEntity.fromJson,
    (StatisticReportDailyElecIncomeDetail).toString():
        StatisticReportDailyElecIncomeDetail.fromJson,
    (StatisticReportSubsidyDTO).toString(): StatisticReportSubsidyDTO.fromJson,
    (TokenEntity).toString(): TokenEntity.fromJson,
    (UserInfoEntity).toString(): UserInfoEntity.fromJson,
    (WeatherEntity).toString(): WeatherEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
